name: Test-all-custom-flags
run-name: All tests with extension build ${{ inputs.CLIENTS_BRANCH }} by @${{ github.actor }}
on:
  push:
    branches:
      - "main"
  pull_request:
  workflow_dispatch:
    inputs:
      CLIENTS_BRANCH:
        default: "main"
        description: "clients branch of browser build to use"
        required: true
        type: string
      FEATURE_FLAGS:
        default: "{}"
        description: 'JSON key-value pairs representing feature flag states. (e.g. {"autofill-v2": true, "autofill-overlay": false})'
        required: true
        type: string
jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
      packages: read
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Node
        uses: actions/setup-node@1d0ff469b7ec7b3cb9d8673fde0c81c44821de2a # v4.2.0
        with:
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"
          node-version: "23"

      - name: Log in to Azure
        uses: bitwarden/gh-actions/azure-login@main
        with:
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: Get Azure Key Vault secrets
        id: get-kv-secrets
        uses: bitwarden/gh-actions/get-keyvault-secrets@main
        with:
          keyvault: gh-browser-interactions
          secrets: "ENV-FILE,BW-INSTALLATION-ID,BW-INSTALLATION-KEY"

      - name: Log out from Azure
        uses: bitwarden/gh-actions/azure-logout@main

      - name: Create dotenv file
        run: |
          sudo setcap 'cap_net_bind_service=+ep' `which node`
          > .env
          echo "CI=${{ secrets.CI }}" >> .env
          echo "PAGES_HOST_PORT=${{ secrets.PAGES_HOST_PORT }}" >> .env
          echo "PAGES_HOST_INSECURE_PORT=${{ secrets.PAGES_HOST_INSECURE_PORT }}" >> .env
          echo "PAGES_HOST=\"${{ secrets.PAGES_HOST }}\"" >> .env
          echo "PUBLIC_TEST_EMAIL=\"${{ secrets.PUBLIC_TEST_EMAIL }}\"" >> .env
          echo "VAULT_EMAIL=\"${{ secrets.VAULT_EMAIL }}\"" >> .env
          echo "VAULT_PASSWORD=\"${{ secrets.VAULT_PASSWORD }}\"" >> .env
          echo "CLI_SERVE_HOST=\"${{ secrets.CLI_SERVE_HOST }}\"" >> .env
          echo "CLI_SERVE_PORT=${{ secrets.CLI_SERVE_PORT }}" >> .env
          echo "VAULT_HOST_PORT=${{ secrets.VAULT_HOST_PORT }}" >> .env
          echo "VAULT_HOST_INSECURE_PORT=${{ secrets.VAULT_HOST_INSECURE_PORT }}" >> .env
          echo "VAULT_HOST_URL=\"${{ secrets.VAULT_HOST_URL }}\"" >> .env
          echo "EXTENSION_BUILD_PATH=\"${{ secrets.EXTENSION_BUILD_PATH }}\"" >> .env
          echo "BW_DOMAIN=\"${{ secrets.BW_DOMAIN }}\"" >> .env
          echo "BW_DB_PROVIDER=\"${{ secrets.BW_DB_PROVIDER }}\"" >> .env
          echo "BW_DB_SERVER=\"${{ secrets.BW_DB_SERVER }}\"" >> .env
          echo "BW_DB_DATABASE=\"${{ secrets.BW_DB_DATABASE }}\"" >> .env
          echo "BW_DB_USERNAME=\"${{ secrets.BW_DB_USERNAME }}\"" >> .env
          echo "BW_DB_PASSWORD=\"${{ secrets.BW_DB_PASSWORD }}\"" >> .env
          echo "BW_DB_PORT=${{ secrets.BW_DB_PORT }}" >> .env
          echo "BW_ENABLE_SSL=\"${{ secrets.BW_ENABLE_SSL }}\"" >> .env
          echo "BW_SSL_CERT=\"${{ secrets.BW_SSL_CERT }}\"" >> .env
          echo "BW_SSL_KEY=\"${{ secrets.BW_SSL_KEY }}\"" >> .env
          echo "KDF_ITERATIONS=${{ secrets.KDF_ITERATIONS }}" >> .env
          echo "MASTER_PASSWORD_HASH=\"${{ secrets.MASTER_PASSWORD_HASH }}\"" >> .env
          echo "PROTECTED_SYMMETRIC_KEY=\"${{ secrets.PROTECTED_SYMMETRIC_KEY }}\"" >> .env
          echo "BW_INSTALLATION_ID=\"${{ steps.get-kv-secrets.outputs.BW-INSTALLATION-ID }}\"" >> .env
          echo "BW_INSTALLATION_KEY=\"${{ steps.get-kv-secrets.outputs.BW-INSTALLATION-KEY }}\"" >> .env
          echo "GENERATED_RSA_KEY_PAIR_PUBLIC_KEY=\"${{ secrets.GENERATED_RSA_KEY_PAIR_PUBLIC_KEY }}\"" >> .env
          echo "GENERATED_RSA_KEY_PAIR_PROTECTED_PRIVATE_KEY=\"${{ secrets.GENERATED_RSA_KEY_PAIR_PROTECTED_PRIVATE_KEY }}\"" >> .env

      - name: Create feature flags file
        run: echo "{\"flagValues\":${{ inputs.FEATURE_FLAGS || '{}' }}}" > flags.json

      - name: Download extension artifact
        uses: dawidd6/action-download-artifact@09f2f74827fd3a8607589e5ad7f9398816f540fe # v3.1.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build-browser.yml
          workflow_conclusion: ""
          branch: ${{ inputs.CLIENTS_BRANCH || 'main' }}
          name: ^dist-chrome-MV3-\w{7}\.zip$
          name_is_regexp: true
          repo: bitwarden/clients
          if_no_artifact_found: fail
          skip_unpack: true

      - name: Unzip extension artifact
        run: |
          unzip -o *dist-chrome-*.zip.zip
          unzip -o 'dist-chrome*.zip' -d build

      - name: Generate and install certs
        run: |
          npm run setup:ssl
          sudo apt-get install libnss3-tools=2:3.98-1build1
          . .env
          mkdir -p $HOME/.pki/nssdb
          certutil -d $HOME/.pki/nssdb -N --empty-password
          certutil -d sql:$HOME/.pki/nssdb -A -t "CP,CP," -n TestAutomationSSL -i ./$BW_SSL_CERT

      - name: Install Bitwarden CLI
        run: npm install -g @bitwarden/cli@2024.2.0

      - name: Install project dependencies
        run: |
          npm ci
          npx playwright install --with-deps chromium

      - name: Build and start the test vault
        run: docker compose up -d --build --remove-orphans --wait --wait-timeout 60

      - name: Setup the vault test account
        run: npm run seed:vault:account

      - name: Setup the vault test account ciphers
        run: |
          npm run start:cli
          npm run seed:vault:ciphers

      - name: Download test site build
        uses: dawidd6/action-download-artifact@09f2f74827fd3a8607589e5ad7f9398816f540fe # v3.1.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build.yml
          workflow_conclusion: ""
          branch: main
          name: build-files
          path: test-site
          repo: bitwarden/test-the-web
          if_no_artifact_found: fail

      - name: Copy over certs and install test site dependencies
        run: |
          cp ssl.crt test-site/api/
          cp ssl.key test-site/api/
          cd test-site
          npm ci

      - name: Run all tests
        run: npm run test:static:ci

      - name: Update job summary
        if: always()
        run: echo "$(<./test-summary/test-summary.md)" >> $GITHUB_STEP_SUMMARY

      - name: Upload results as artifact
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        if: always()
        with:
          name: test-summary
          path: |
            ./flags.json
            ./test-summary
            ./tests-out/videos
            ./tests-out/screenshots
